<?php

namespace Sistemadmin\BackendBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Inventario\RespaldoBundle\Entity\Movimiento;
use Sistemadmin\BackendBundle\Entity\Pago;
use Sistemadmin\BackendBundle\Entity\Venta;
use Sistemadmin\BackendBundle\Entity\Deuda;
use Symfony\Component\Validator\Constraints\DateTime;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Query\Parameter;


/**
 * VentaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VentaRepository extends EntityRepository
{
    public function Create($ventum) {
        $em = $this->getEntityManager();
        
         if (!$this->VentaExist($ventum)) {
        
//        $articuloventas = $ventum->getArticuloventas();
//        foreach ($articuloventas as $articuloventa) {
//            $articuloventa->setVenta($ventum);
//            $em->persist($articuloventa);
//            $em->flush();
//        }

//            generar deuda
        
//        print_r('bbbb');die();
        
        if ($ventum->getTotalrecibido() == 0) {
            $ventum->setFinalizada(false);
        } else {
            if ($ventum->getMontototalapagar()-$ventum->getTotalrecibido() >1) {
                $deuda = $this->CreateDeuda($ventum);
            }
            $this->CreatePagoInicial($ventum);
            $ventum->setFinalizada(true);
        }
        $em->persist($ventum);
        $em->flush();
        
        $num = $ventum->getNumerodedocumento();
        $serie = $ventum->getSerie();
        $documento = $ventum->getDocumento();
        if ($serie==1) {
            $documento->setNumero1($num); 
        }elseif ($serie==2) {
            $documento->setNumero2($num); 
        }  else {
           $documento->setNumero3($num); 
        }
        $em->persist($documento);
        $em->flush();
                 
         return true;
        } else {
            return false;
        }
    }

     
    protected function VentaExist($ventum) {
                        
        $tipodocumento=$ventum->getDocumento()->getId();
         $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('b')
                ->from('BackendBundle:Venta', 'b')
                ->where('b.numerodedocumento = :numero and b.serie = :serie and b.documento = :tipodoc')
                ->setParameters(new ArrayCollection(array(
                    new Parameter('numero', $ventum->getNumerodedocumento()),new Parameter('serie', $ventum->getSerie()),new Parameter('tipodoc', $tipodocumento))));
        $query = $qb->getQuery();
        $ventas = $query->getResult();

        foreach ($ventas as $br) {
            if ($br->getId() === $ventum->getId()) {
                return false;
            }
        }
//        print_r($ventas[0]);die();
        if (\count($ventas)) {
            return true;
        }
        return false;         
    }

    public function Update($ventum) {

//verificar si se modificó el monto total a pagar  o el total recibido      
        $em = $this->getEntityManager();
        $query0 = $em->createQuery(
                        'SELECT u.totalrecibido
                            FROM BackendBundle:Venta u
                            WHERE u.id = :id'
                )->setParameter('id', $ventum->getId());
        $totalrecibido = $query0->getResult();
        $query0 = $em->createQuery(
                        'SELECT u.montototalapagar
                            FROM BackendBundle:Venta u
                            WHERE u.id = :id'
                )->setParameter('id', $ventum->getId());
        $montototalapagar = $query0->getResult();


//        $ventaold = $this->getEntityManager()->getRepository('BackendBundle:Venta')->find($ventum->getId());
//        print_r($ventas[0]);die;
        if ($ventum->getMontototalapagar() != $montototalapagar[0]['montototalapagar'] || $ventum->getTotalrecibido() != $totalrecibido[0]['totalrecibido']) {
            //verifica  deuda y pago asociada a esa venta  para eliminarla y crear otra transaccion posteriormente
            $this->DeleteDeuda($ventum);

            $this->DeletePago($ventum) ;

            $this->CreatePagoInicial($ventum);

            //genero una nueva deuda y pago para esa venta si es necesario
            if ($ventum->getMontototalapagar()- $ventum->getTotalrecibido()>0) {

                $this->CreateDeuda($ventum);

            }

        }
         if ($ventum->getTotalrecibido() === 0 or $ventum->getTotalrecibido() === NULL) {
            $ventum->setFinalizada(false);
        }else{            
            $ventum->setFinalizada(true);
        }
        
        
        
        $em->persist($ventum);
        $em->flush();
        
        return true;
    }
    
    public function Delete($ventum) {
//verificar si existe alguna deuda asociada a esa venta     
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            'SELECT u
            FROM BackendBundle:Deuda u
            WHERE u.numerofactura = :numerodocumento'  
        )->setParameter('numerodocumento', $ventum->getNumerodedocumento());        
        $deuda = $query->getResult();
        if (count($deuda) > 0) {   
           if ($deuda[0]->getTienedeuda() == 1){
               //si la deuda es activa ver si es la unica del cliente 
               $cliente=$deuda[0]->getCliente();               
               $query3 = $em->createQuery(
                                'SELECT COUNT(u.id)
                FROM BackendBundle:Cliente u
                WHERE u.id = :id AND u.deuda = true'
                        )->setParameter('id', $cliente->getId());

                $numerodedeudasactivas = $query3->getSingleScalarResult();

                if ($numerodedeudasactivas == 1) {
                   $cliente->setDeuda(0);
                   $em->persist($cliente);
                   $em->flush();
               }
            }
            $em->remove($deuda[0]);
            $em->flush();
        }
//verificar si existe algun pago asociado a esa venta            
        $query2 = $em->createQuery(
            'SELECT u
            FROM BackendBundle:Pago u
            WHERE u.numerofactura = :numerodocumento'  
        )->setParameter('numerodocumento', $ventum->getNumerodedocumento());        
        $pago = $query2->getResult();
        
        if (count($pago) > 0) { 
            foreach ($pago as $pag) {
             $em->remove($pag);
            $em->flush();
        }
        }
        //una vez eliminado todo lo asociado a esa venta la puedo eliminar   
        // en lugar de eliminar la pongo como anulada
        $ventum->setAnulada(true);
        $em->persist($ventum);
        $em->flush();
//        $em->remove($ventum);
//        $em->flush();
        return true;
    }

    public function DeletePreventa($ventum) {
//verificar si existe alguna deuda asociada a esa venta     
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            'SELECT u
            FROM BackendBundle:Deuda u
            WHERE u.numerofactura = :numerodocumento'  
        )->setParameter('numerodocumento', $ventum->getNumerodedocumento());        
        $deuda = $query->getResult();
        if (count($deuda) > 0) {   
           if ($deuda[0]->getTienedeuda() == 1){
               //si la deuda es activa ver si es la unica del cliente 
               $cliente=$deuda[0]->getCliente();               
               $query3 = $em->createQuery(
                                'SELECT COUNT(u.id)
                FROM BackendBundle:Cliente u
                WHERE u.id = :id AND u.deuda = true'
                        )->setParameter('id', $cliente->getId());

                $numerodedeudasactivas = $query3->getSingleScalarResult();

                if ($numerodedeudasactivas == 1) {
                   $cliente->setDeuda(0);
                   $em->persist($cliente);
                   $em->flush();
               }
            }
            $em->remove($deuda[0]);
            $em->flush();
        }
//verificar si existe algun pago asociado a esa venta            
        $query2 = $em->createQuery(
            'SELECT u
            FROM BackendBundle:Pago u
            WHERE u.numerofactura = :numerodocumento'  
        )->setParameter('numerodocumento', $ventum->getNumerodedocumento());        
        $pago = $query2->getResult();
        
        if (count($pago) > 0) { 
            foreach ($pago as $pag) {
             $em->remove($pag);
            $em->flush();
        }
        }
        //una vez eliminado todo lo asociado a esa venta la puedo eliminar  la preventa 
         $em->remove($ventum);
        $em->flush();
        return true;
    }
    
    //crea deuda y le pone al cliente que tiene deuda en true
    function CreateDeuda($ventum){
         $em = $this->getEntityManager();
        $diferencia = $ventum->getMontototalapagar() - $ventum->getTotalrecibido();
        $deuda = new Deuda();
        $deuda->setCliente($ventum->getCliente());
        $deuda->setDeuda($diferencia);
        $deuda->setFechainicio($ventum->getFecha());
        $deuda->setSerie($ventum->getSerie());
        $deuda->setNumerofactura($ventum->getNumerodedocumento());
        $deuda->setTienedeuda(true);
        $deuda->setTotalapagar($ventum->getMontototalapagar());
        $em->persist($deuda);
/*        $em->flush();*/
        //añadir deuda a cliente
        $cliente = $ventum->getCliente();
        $cliente->setDeuda(true);
        $totaldeuda = $diferencia + $cliente->getMontodeuda();
        $cliente->setMontodeuda($totaldeuda);
        $em->persist($cliente);
/*        $em->flush();*/
        return $deuda;
    }
    
    //elimina la deuda y reduce el monto que debe el cliente
    function DeleteDeuda($ventum) {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
                        'SELECT u
                            FROM BackendBundle:Deuda u
                            WHERE u.numerofactura = :numerodocumento'
                )->setParameter('numerodocumento', $ventum->getNumerodedocumento());
        $deuda = $query->getResult();
        if (count($deuda) > 0) {
            if ($deuda[0]->getTienedeuda() == 1) {
                //si la deuda es activa ver si es la unica del cliente 
                $cliente = $deuda[0]->getCliente();
                $query3 = $em->createQuery(
                                'SELECT COUNT(u.id)
                                    FROM BackendBundle:Cliente u
                                    WHERE u.id = :id AND u.deuda = true'
                        )->setParameter('id', $cliente->getId());

                $numerodedeudasactivas = $query3->getSingleScalarResult();

                if ($numerodedeudasactivas == 1) {
                    $cliente->setDeuda(0);
                    $totaldeuda = $cliente->getMontodeuda() - $deuda[0]->getTotalapagar();
                    $cliente->setMontodeuda($totaldeuda);
                    $em->persist($cliente);
                    $em->flush();
                }
            }
            $em->remove($deuda[0]);
            $em->flush();
        }
    }
    
    function DeletePago($ventum) {
        $em = $this->getEntityManager();
          $query = $em->createQuery(
                        'SELECT u
                            FROM BackendBundle:Pago u
                            WHERE u.serie = :serie and u.numerofactura = :numerofactura'
                )->setParameter('serie', $ventum->getSerie())
                ->setParameter('numerofactura', $ventum->getNumerodedocumento());
        
        $pagos= $query->getResult();
        foreach ($pagos as $p) {
            $em->remove($p);
            $em->flush();
        }
    }

    //cancela deuda y pone la fecha de cancelacion en el pago
    function CancelDeuda($deuda,$pago) {
        $quedaporpagar = $deuda->getTotalapagar() - $pago->getMontopagado();
        $em = $this->getEntityManager();
        $deuda->setTotalapagar(0);
        $deuda->setDeuda(0);
        $deuda->setTienedeuda(false);
        $deuda->setFechacancelacion(new \DateTime());
        $em->persist($deuda);
        $em->flush();

        $pago->setFechacancelacion(new \DateTime());
        $pago->setTienedeuda(false);

        $em->persist($pago);
         $em->flush();
         
        //si la deuda es activa ver si es la unica del cliente 
        $cliente = $deuda->getCliente();
//        $query3 = $em->createQuery(
//                        'SELECT COUNT(u.id)
//                                    FROM BackendBundle:Cliente u
//                                    WHERE u.id = :id AND u.deuda = true'
//                )->setParameter('id', $cliente->getId());
//
//        $numerodedeudasactivas = $query3->getSingleScalarResult();

         $totaldeuda = $cliente->getMontodeuda() - $pago->getMontopagado();
        $cliente->setMontodeuda($totaldeuda);
        if ($totaldeuda == 0) {
            $cliente->setDeuda(0);
        }
        $em->persist($cliente);
        $em->flush();
        
         

        return true;
    }
    
    //reduce la deuda, pone en el pago que aun tiene deuda y reduce el monto que debe el cliente
    function ReduceDeuda($deuda,$pago) {
        $em = $this->getEntityManager();
        $quedaporpagar = $deuda->getTotalapagar() - $pago->getMontopagado();
        $pago->setFechacancelacion(null);
        $pago->setTotalapagar($deuda->getTotalapagar());
        $pago->setTienedeuda(true);
        $em->persist($pago);
        $em->flush();
                
        $deuda->setTotalapagar($quedaporpagar);
        $deuda->setDeuda($quedaporpagar);
        $em->persist($deuda);
        $em->flush();
        
        $cliente = $deuda->getCliente();
        $totaldeuda = $cliente->getMontodeuda() - $pago->getMontopagado();
        $cliente->setMontodeuda($totaldeuda);
        $em->persist($cliente);
        $em->flush();
        
        return true;
    }
    
    public function CastToFactura($ventum) {
       
        $em = $this->getEntityManager();
        $FACT='FACTURA';
        $query0 = $em->createQuery(
                        'SELECT u
                            FROM BackendBundle:Documento u
                            WHERE u.tipodocumento = :factura'
                )->setParameter('factura', $FACT);;
        $documento = $query0->getResult();
        
        
        
        $ventum2 = new Venta();
        $ventum2= clone $ventum;
        
        $ventum2->setDocumento($documento[0]);
        $ventum2->setFecha( new \DateTime() );
        
        $serie=$ventum->getSerie();
        
        if($serie==1){
            $numeronuevo=$documento[0]->getNumero1();
            $documento[0]->setNumero1($numeronuevo+1);
        }elseif($serie==2){
            $numeronuevo=$documento[0]->getNumero2();
            $documento[0]->setNumero2($numeronuevo+1);
        }else{
            $numeronuevo=$documento[0]->getNumero3();
            $documento[0]->setNumero3($numeronuevo+1);
        }        
        $ventum2->setNumerodedocumento($numeronuevo+1);  
                
        $ventum->setNewnumerofactura($ventum2->getNumerodedocumento());
        $ventum->setAnulada(true);
        
//        print_r($ventum2->getDocumento());die();
        
        $em->persist($ventum);
        $em->persist($ventum2);
        $em->persist($documento[0]);
        $em->flush();
        
        return true;
    }
    
    
    public function GetTotalVendido() {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('l');       
         $qb->select('e')
                ->from('BackendBundle:Venta', 'e')
                ->where('e.finalizada=true and (e.anulada = false or e.anulada IS NULL)');
        $query= $qb->getQuery();
         $ventas= $query->getResult();
        
        $vendido=0;
        foreach ($ventas as $venta) {
            $vendido = $vendido + $venta->getMontototalapagar();
        }

        return $vendido;
    }
    
    public function GetTotalVendidoByFecha($fecha1) {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('l');       
         $qb->select('e')
                ->from('BackendBundle:Venta', 'e')
                 ->where('e.finalizada=true and e.fecha = :fecha1 and (e.anulada = false or e.anulada IS NULL)')
        ->setParameter('fecha1', $fecha1 );
         
        $query= $qb->getQuery();
         $ventas= $query->getResult();
        
        $vendido=0;
        foreach ($ventas as $venta) {
            $vendido = $vendido + $venta->getMontototalapagar();
        }

        return $vendido;
    }
    
     public function GetTotalVendidoByRangoFecha($fecha1,$fecha2) {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('l');       
         $qb->select('e')
                ->from('BackendBundle:Venta', 'e')
                 ->where('e.finalizada=true and e.fecha >= :fecha1 and e.fecha<=:fecha2 and (e.anulada = false or e.anulada IS NULL)')
        ->setParameter('fecha1', $fecha1)
                ->setParameter('fecha2', $fecha2 );
        
        $query= $qb->getQuery();
         $ventas= $query->getResult();
        
        $vendido=0;
        foreach ($ventas as $venta) {
            $vendido = $vendido + $venta->getMontototalapagar();
        }

        return $vendido;
    }
    
    
     ////search functions///////////////

    public function GetByFechaDiariaParam($fecha1, $order_by = 0, $offset = 0, $limit = 0) {
        $em = $this->getEntityManager();

        $qb = $em->createQueryBuilder('l');       
        $qb->select('e')
                ->from('BackendBundle:Venta', 'e')
                ->where('e.finalizada=true and e.fecha = :fecha1 and (e.anulada = false or e.anulada IS NULL)')
                 ->orderBy('e.fecha','desc')
        ->setParameter('fecha1', $fecha1 );
        
        
        //Show all if offset and limit not set, also show all when limit is 0
        if ((isset($offset)) && (isset($limit))) {
            if ($limit > 0) {
                $qb->setFirstResult($offset);
                $qb->setMaxResults($limit);
            }           
        }
        //Adding defined sorting parameters from variable into query
//        if($offset != 0){
//        foreach ($order_by as $key => $value) {
//            $qb->add('orderBy', 'l.' . $key . ' ' . $value);
//        }}
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function GetByFechaDiariaParamCount($fecha1) {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('l');       
        $qb->select('COUNT(e)')
                ->from('BackendBundle:Venta', 'e')
                ->where('e.finalizada=true and e.fecha = :fecha1 and (e.anulada = false or e.anulada IS NULL)')
                 ->orderBy('e.fecha','desc')
        ->setParameter('fecha1',$fecha1);    
        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }
    
    public function GetByFechaRangoParam($fecha1, $fecha2,$order_by = 0, $offset = 0, $limit = 0) {
        $em = $this->getEntityManager();

        $qb = $em->createQueryBuilder('l');       
        $qb->select('e')
                ->from('BackendBundle:Venta', 'e')
                ->where('e.finalizada=true and e.fecha >= :fecha1 and e.fecha<=:fecha2 and (e.anulada = false or e.anulada IS NULL)')
        ->setParameter('fecha1', $fecha1)
                ->setParameter('fecha2', $fecha2 )
                 ->orderBy('e.fecha','desc');
        
        
        //Show all if offset and limit not set, also show all when limit is 0
        if ((isset($offset)) && (isset($limit))) {
            if ($limit > 0) {
                $qb->setFirstResult($offset);
                $qb->setMaxResults($limit);
            }           
        }
        //Adding defined sorting parameters from variable into query
//        if($order_by!=0){
//        foreach ($order_by as $key => $value) {
//            $qb->add('orderBy', 'l.' . $key . ' ' . $value);
//        }}
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function GetByFechaRangoParamCount($fecha1,$fecha2) {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('l');       
        $qb->select('COUNT(e)')
                ->from('BackendBundle:Venta', 'e')
                ->where('e.finalizada=true and e.fecha >= :fecha1 and e.fecha<=:fecha2 and (e.anulada = false or e.anulada IS NULL) ')
        ->setParameter('fecha1', $fecha1 )
               ->setParameter('fecha2', $fecha2 )
                 ->orderBy('e.fecha','desc');
        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }    
    
    public function GetByFinalizadaParam( $order_by = 0, $offset = 0, $limit = 0) {
        $em = $this->getEntityManager();

        $fecha1 = new \DateTime();
        $qb = $em->createQueryBuilder('l');       
//        $qb->select('e')
//                ->from('BackendBundle:Venta', 'e')
//                ->where('e.finalizada = true and e.fecha = :fecha1')
//                 ->setParameter('fecha1', $fecha1->format('Y-m-d') );
         $qb->select('e')
                ->from('BackendBundle:Venta', 'e')
                ->where('e.finalizada = true and (e.anulada = false  or e.anulada IS NULL)')
                  ->orderBy('e.fecha','desc');
        
        
        //Show all if offset and limit not set, also show all when limit is 0
        if ((isset($offset)) && (isset($limit))) {
            if ($limit > 0) {
                $qb->setFirstResult($offset);
                $qb->setMaxResults($limit);
            }           
        }
        //Adding defined sorting parameters from variable into query
//        if($offset != 0){
//        foreach ($order_by as $key => $value) {
//            $qb->add('orderBy', 'e.' . $key . ' ' . $value);
//        }}
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function GetByFinalizadaParamCount() {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('l');      
        $fecha1 = new \DateTime();
//        $qb->select('COUNT(e)')
//                ->from('BackendBundle:Venta', 'e')
//                ->where('e.finalizada = true and e.fecha = :fecha1')
//                 ->setParameter('fecha1', $fecha1->format('Y-m-d') );
         $qb->select('COUNT(e)')
                ->from('BackendBundle:Venta', 'e')
                ->where('e.finalizada = true and (e.anulada = false  or e.anulada IS NULL)')
                  ->orderBy('e.fecha','desc');
        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }
    
    public function GetByFinalizadaTodasParam( $order_by = 0, $offset = 0, $limit = 0) {
        $em = $this->getEntityManager();

        $fecha1 = new \DateTime();
        $qb = $em->createQueryBuilder('l');       
        $qb->select('e')
                ->from('BackendBundle:Venta', 'e')
                ->where('e.finalizada = true and (e.anulada = false or e.anulada IS NULL)')
                 ->orderBy('e.fecha','desc');
        
        
        //Show all if offset and limit not set, also show all when limit is 0
        if ((isset($offset)) && (isset($limit))) {
            if ($limit > 0) {
                $qb->setFirstResult($offset);
                $qb->setMaxResults($limit);
            }           
        }
        //Adding defined sorting parameters from variable into query
//        if($offset != 0){
//        foreach ($order_by as $key => $value) {
//            $qb->add('orderBy', 'e.' . $key . ' ' . $value);
//        }}
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function GetByFinalizadaTodasParamCount() {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('l');      
        $fecha1 = new \DateTime();
//        print_r($fecha1->format('Y-m-d'));
//                die();
        $qb->select('COUNT(e)')
                ->from('BackendBundle:Venta', 'e')
                ->where('e.finalizada = true and (e.anulada = false or e.anulada IS NULL)')
                 ->orderBy('e.fecha','desc');
        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }
    
    public function GetByNotFinalizadaParam( $order_by = 0, $offset = 0, $limit = 0) {
        $em = $this->getEntityManager();

        $qb = $em->createQueryBuilder('l');       
        $qb->select('e')
                ->from('BackendBundle:Venta', 'e')
                ->where('e.finalizada = 0 and (e.anulada = false or e.anulada IS NULL)')
                 ->orderBy('e.fecha','desc');
        
        
        //Show all if offset and limit not set, also show all when limit is 0
        if ((isset($offset)) && (isset($limit))) {
            if ($limit > 0) {
                $qb->setFirstResult($offset);
                $qb->setMaxResults($limit);
            }           
        }
        //Adding defined sorting parameters from variable into query
//        if($offset != 0){
//        foreach ($order_by as $key => $value) {
//            $qb->add('orderBy', 'l.' . $key . ' ' . $value);
//        }}
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function GetByNotFinalizadaParamCount() {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('l');       
        $qb->select('COUNT(e)')
                ->from('BackendBundle:Venta', 'e')
                ->where('e.finalizada = 0 and (e.anulada = false or e.anulada IS NULL)')
                 ->orderBy('e.fecha','desc');
        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }
    
    public function GetByAnuladasParam( $order_by = 0, $offset = 0, $limit = 0) {
        $em = $this->getEntityManager();

        $fecha1 = new \DateTime();
        $qb = $em->createQueryBuilder('l');       
        $qb->select('e')
                ->from('BackendBundle:Venta', 'e')
                ->where('e.finalizada = true and (e.anulada = true)')
                 ->orderBy('e.fecha','desc');
        
        
        //Show all if offset and limit not set, also show all when limit is 0
        if ((isset($offset)) && (isset($limit))) {
            if ($limit > 0) {
                $qb->setFirstResult($offset);
                $qb->setMaxResults($limit);
            }           
        }
        //Adding defined sorting parameters from variable into query
//        if($offset != 0){
//        foreach ($order_by as $key => $value) {
//            $qb->add('orderBy', 'e.' . $key . ' ' . $value);
//        }}
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function GetByAnuladasParamCount() {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('l');      
        $fecha1 = new \DateTime();
//        print_r($fecha1->format('Y-m-d'));
//                die();
        $qb->select('COUNT(e)')
                ->from('BackendBundle:Venta', 'e')
                ->where('e.finalizada = true and (e.anulada = true)')
                 ->orderBy('e.fecha','desc');
        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }
     
    public function GetByTicketsParam( $order_by = 0, $offset = 0, $limit = 0) {
        $em = $this->getEntityManager();

        $fecha1 = new \DateTime();
        $qb = $em->createQueryBuilder('l');       
        $qb->select('e')
                ->from('BackendBundle:Venta', 'e')                
                ->where('e.finalizada = true and (e.anulada = false or e.anulada IS NULL) and e.documento = 3')
                 ->orderBy('e.fecha','desc');
        
        
        //Show all if offset and limit not set, also show all when limit is 0
        if ((isset($offset)) && (isset($limit))) {
            if ($limit > 0) {
                $qb->setFirstResult($offset);
                $qb->setMaxResults($limit);
            }           
        }
        //Adding defined sorting parameters from variable into query
//        if($offset != 0){
//        foreach ($order_by as $key => $value) {
//            $qb->add('orderBy', 'e.' . $key . ' ' . $value);
//        }}
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function GetByTicketsParamCount() {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('l');      
        $fecha1 = new \DateTime();
//        print_r($fecha1->format('Y-m-d'));
//                die();
        $qb->select('COUNT(e)')
                ->from('BackendBundle:Venta', 'e')
                ->where('e.finalizada = true and (e.anulada = false or e.anulada IS NULL) and e.documento = 3 ')
                 ->orderBy('e.fecha','desc');
        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }   
    
    
       public function getVentasPorVendedor($params) {
        $em = $this->getEntityManager();
//        print_r( $params['fechai']);
//        die();
        
       $dql = "SELECT av,v,a FROM BackendBundle:ArticuloVenta av
          JOIN av.venta v
          JOIN av.articulo a
          where v.finalizada=true and (v.anulada = false or v.anulada IS NULL) and v.vendedor=:vend and v.fecha<=:ff and v.fecha>=:fi";
        $consulta = $em->createQuery($dql)
            ->setParameter('fi', $params['fechai'] )
            ->setParameter('ff', $params['fechaf'] )
            ->setParameter('vend', $params['vendedor'] );
        $articulosventa= $consulta->getResult();
     
        return $articulosventa;

    }
     public function getVentasPorVendedorNueva($params) {
     $em = $this->getEntityManager();

        $qb = $em->createQueryBuilder('l');       
        $qb->select('e')
                ->from('BackendBundle:Venta', 'e')
//                ->where('e.finalizada=true and e.fecha >= :fi and e.fecha<=:ff and (e.anulada = false or e.anulada IS NULL)')
                ->where('e.finalizada=true and (e.anulada = false or e.anulada IS NULL) and e.fecha<=:ff and e.fecha>=:fi')
        ->setParameter('fi', $params['fechai'])
                ->setParameter('ff', $params['fechaf']  )
                 ->orderBy('e.fecha','desc');
        
        
        //Show all if offset and limit not set, also show all when limit is 0
        if ((isset($offset)) && (isset($limit))) {
            if ($limit > 0) {
                $qb->setFirstResult($offset);
                $qb->setMaxResults($limit);
            }           
        }
        //Adding defined sorting parameters from variable into query
//        if($order_by!=0){
//        foreach ($order_by as $key => $value) {
//            $qb->add('orderBy', 'l.' . $key . ' ' . $value);
//        }}
        $query = $qb->getQuery();
        $ventas= $query->getResult();
               
        $ventasred = array();
        foreach ($ventas as $venta) {
            if( $venta->getVendedor()->getId()== $params['vendedor']){
                $ventasred[] = $venta->getId();
            }
        }
        
//         print_r($ventasred);
//        die();
        $qb2 = $em->createQueryBuilder('l');       
         $qb2->select('e')
                ->from('BackendBundle:ArticuloVenta', 'e')
                 ->where('e.venta IN(:id)')->setParameter('id', $ventasred);
                 
                 
//                 for ($i = 1; $i < count($ventasred); $i++) {
//            $qb2->andWhere("e.venta IN(:id)")->setParameter("id", $ventasred[$i]);
//        }
//        ->where('e.venta IN :ids')
//                ->setParameters('ids', $ventasred);


        $query2 = $qb2->getQuery();
        $articulosventa= $query2->getResult();
         
        return $articulosventa;
}
    
//    public function buscarVentasPorFecha()//$parametros)
//    {
//        $em = $this->getEntityManager();
//        $dql = 'SELECT v,c,d FROM BackendBundle:Venta v
//            JOIN v.documento d
//            JOIN v.cliente c';
//        //    WHERE v.fecha >= :fechainical and v.fecha<=:fechafinal';
//        $consulta = $em->createQuery($dql);
//     /*   $consulta->setParameter('fechainicial', $parametros['fechaini']);
//        $consulta->setParameter('fechafinal', $parametros['fechafin']);*/
//        return $consulta->getResult();
//    }    

    //////Auxiliary Functions///////////////////

    public function maxkey($array) {
        foreach ($array as $key => $val) {
            if ($val == max($array)) {
                return $key;
            }
        }
    }

    public function getkey($array, $value) {
        foreach ($array as $key => $val) {
            if ($val == $value) {
                return $key;
            }
        }
    }

    public function pageresults($array, $offset, $limit) {
        $paged = array();
        $count = 0;
        foreach ($array as $key => $val) {
            if ($key >= $offset && $count < $limit) {
                $paged[] = $val;
                $count = $count + 1;
            }
        }
        return $paged;
    }
    
    function CreatePagoInicial($ventum){
        $em = $this->getEntityManager();
        $pago=new Pago();
        $pago->setSerie($ventum->getSerie());
        $pago->setNumerofactura($ventum->getNumerodedocumento());
        $pago->setTotalapagar($ventum->getMontototalapagar());
        $pago->setCliente($ventum->getCliente());
        $pago->setMontopagado($ventum->getTotalrecibido());
        $pago->setFechapago($ventum->getFecha());
        
        if ($ventum->getTotalrecibido() < $ventum->getMontototalapagar()) {
                $pago->setTienedeuda(true);
        }else{
            $pago->setTienedeuda(false);
        }
        
        $em->persist($pago);
    }
    
    public function GetBySerieDocumentoCliente( $serie, $numdocumento,$cliente) {
        $em = $this->getEntityManager();

        $qb = $em->createQueryBuilder('l');       
        $qb->select('e')
                ->from('BackendBundle:Venta', 'e')
                ->where('e.serie = :serie and e.numerodedocumento=:numdocumento and e.cliente = :client')
        ->setParameter('serie', $serie)
                ->setParameter('numdocumento', $numdocumento )
                  ->setParameter('client', $cliente->getId() );
          $query = $qb->getQuery();
        return $query->getResult();  
    }
    
    public function GetByBuscarParamCount($nombres,$parametros) {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('l');      
        foreach ($parametros as $key => $par) {
            if ($parametros[$key] == 'true') {
                $parametros[$key] = 1;
            } elseif ($parametros[$key] == 'false') {
                $parametros[$key] = 0;
            }
        }       
        
        $qb->select('COUNT(e)')
                ->from('BackendBundle:Venta', 'e');
//                 ->where('e.nombre LIKE :name1 and e.deuda = :deuda1')
//                ->setParameter('name1', '%' . $parametros[0] . '%')
//                ->setParameter('deuda1', $parametros[1]);

       $sent='';
        foreach ($parametros as $key=>$par){
            if ($key==0) {
                $sent = 'e.' . $nombres[$key] . ' LIKE :' . $nombres[$key] . '1';
            }
            else{
               $sent = $sent . ' and e.' . $nombres[$key] . ' = :' . $nombres[$key] . '1'; 
            }                   
        }
        $qb->where($sent); 
        
                       
        foreach ($parametros as $key=>$par){
            if ($key==0) {
                $qb->setParameter( $nombres[$key] . '1', '%' . $parametros[$key] . '%');
            }
            else{
                 $qb->setParameter($nombres[$key]. '1', $parametros[$key] );              
            }                   
        }
                        
//        print_r( $qb->getDQL());
//                die();
        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }
    
    public function GetByBuscarParam($nombres,$parametros, $order_by = 0, $offset = 0, $limit = 0) {
        $em = $this->getEntityManager();

        foreach ($parametros as $key => $par) {
            if ($parametros[$key] == 'true') {
                $parametros[$key] = 1;
            } elseif ($parametros[$key] == 'false') {
                $parametros[$key] = 0;
            }
        }
        
        $qb = $em->createQueryBuilder('l');       
         $qb->select('e')
                ->from('BackendBundle:Venta', 'e');
//                 ->where('e.nombre LIKE :name1 and e.deuda = :deuda1')
//                ->setParameter('name1', '%' . $parametros[0] . '%')
//                ->setParameter('deuda1', $parametros[1]);
                
        $sent='';
        foreach ($parametros as $key=>$par){
            if ($key==0) {
                $sent = 'e.' . $nombres[$key] . ' LIKE :' . $nombres[$key] . '1';
            }
            else{
               $sent = $sent . ' and e.' . $nombres[$key] . ' = :' . $nombres[$key] . '1'; 
            }                   
        }
        $qb->where( $sent); 
        
                       
        foreach ($parametros as $key=>$par){
            if ($key==0) {
                $qb->setParameter($nombres[$key] . '1', '%' . $parametros[$key] . '%');
            }
            else{
                 $qb->setParameter($nombres[$key]. '1', $parametros[$key] );              
            }                   
        }
        
//                print_r($qb->getDQL());
//                die();
        
        //Show all if offset and limit not set, also show all when limit is 0
        if ((isset($offset)) && (isset($limit))) {
            if ($limit > 0) {
                $qb->setFirstResult($offset);
                $qb->setMaxResults($limit);
            }           
        }
        //Adding defined sorting parameters from variable into query
        if($offset != 0){
        foreach ($order_by as $key => $value) {
            $qb->add('orderBy', 'l.' . $key . ' ' . $value);
        }}
        $query = $qb->getQuery();
        return $query->getResult();
    }
    
}
