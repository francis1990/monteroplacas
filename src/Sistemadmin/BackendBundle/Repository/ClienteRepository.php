<?php

namespace Sistemadmin\BackendBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Query\Parameter;

/**
 * ClienteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClienteRepository extends EntityRepository
{
    public function Create($cliente) {
        $em = $this->getEntityManager();

        if (!$this->ClienteExist($cliente)) {
            $cliente->setDeuda(false);
            $cliente->setUtilizado(true);
            $em->persist($cliente);
            $em->flush();

            return true;
        } else {
            return false;
        }
    }
    
    protected function ClienteExist($cliente) {
         $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('b')
                ->from('BackendBundle:Cliente', 'b')
                ->where('b.nombre = :name or b.ruc = :ruc')
                ->setParameters(new ArrayCollection(array(
                    new Parameter('name', $cliente->getNombre()),new Parameter('ruc', $cliente->getRuc()))));
        $query = $qb->getQuery();
        $clientes = $query->getResult();

        foreach ($clientes as $br) {
            if ($br->getId() === $cliente->getId()) {
                return false;
            }
        }

        if (\count($clientes)) {
            return true;
        }
        return false;         
    }


    public function FindDeudasActivas($id) {
//buscar todas las deudas activas de un cliente  
        $em = $this->getEntityManager();
        $query = $em->createQuery(
            'SELECT COUNT(u.id)
            FROM BackendBundle:Cliente u
            WHERE u.id = :id AND u.deuda = true'   
        )->setParameter('id', $id);
        
        $count = $query->getSingleScalarResult();
        return $count;
    }
    
    public function Delete($cliente) {
        
       $em = $this->getEntityManager();   
       
//////este codigo es para borrar el cliente definitivamente de la base de datos       
//        //verificar si existe algun pago asociado a esa cliente            
//        $query2 = $em->createQuery(
//                        'SELECT u
//            FROM BackendBundle:Pago u
//            WHERE u.cliente = :id'
//                )->setParameter('id', $cliente->getId());
//        $pago = $query2->getResult();        
//
//        if (count($pago) > 0) {
//            foreach ($pago as $pag) {
//                $em->remove($pag);
//                $em->flush();
//            }
//        }
//        //verificar si existe alguna deuda asociado a esa cliente            
//        $query3 = $em->createQuery(
//                        'SELECT u
//            FROM BackendBundle:Deuda u
//            WHERE u.cliente = :id'
//                )->setParameter('id', $cliente->getId());
//        $deuda = $query3->getResult();
//
//        if (count($deuda) > 0) {
//            foreach ($deuda as $deu) {
//                $em->remove($deu);
//                $em->flush();
//            }
//        }
//        //verificar si existe alguna venta asociada esa cliente          
//        $query3 = $em->createQuery(
//                        'SELECT u
//            FROM BackendBundle:Venta u
//            WHERE u.cliente = :id'
//                )->setParameter('id', $cliente->getId());
//        $venta = $query3->getResult();
//
//        if (count($venta) > 0) {
//            foreach ($venta as $ven) {
//                $em->remove($ven);
//                $em->flush();
//            }
//        }
//
//        $em->remove($cliente);
//        $em->flush();
/////////////////////////////////////////////////////////////////////////////////        
        
        $cliente->setUtilizado(false);
        $em->flush();
        return true;
        
    }
    
      
      public function GetByParam( $order_by = 0, $offset = 0, $limit = 0) {
        $em = $this->getEntityManager();

        $qb = $em->createQueryBuilder('l');       
        $qb->select('e')
                ->from('BackendBundle:Cliente', 'e')
                ->where('e.utilizado != false or e.utilizado IS NULL');
        
        
        //Show all if offset and limit not set, also show all when limit is 0
        if ((isset($offset)) && (isset($limit))) {
            if ($limit > 0) {
                $qb->setFirstResult($offset);
                $qb->setMaxResults($limit);
            }           
        }
        //Adding defined sorting parameters from variable into query
        if($offset != 0){
        foreach ($order_by as $key => $value) {
            $qb->add('orderBy', 'l.' . $key . ' ' . $value);
        }}
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function GetByParamCount() {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('l');       
        $qb->select('COUNT(e)')
                ->from('BackendBundle:Cliente', 'e')
                ->where('e.utilizado != false or e.utilizado IS NULL');    
        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }
   
    
    public function GetByConDeudaParam( $order_by = 0, $offset = 0, $limit = 0) {
        $em = $this->getEntityManager();

        $qb = $em->createQueryBuilder('l');       
        $qb->select('e')
                ->from('BackendBundle:Cliente', 'e')
                 ->where('e.deuda = true');
        
        
        //Show all if offset and limit not set, also show all when limit is 0
        if ((isset($offset)) && (isset($limit))) {
            if ($limit > 0) {
                $qb->setFirstResult($offset);
                $qb->setMaxResults($limit);
            }           
        }
        //Adding defined sorting parameters from variable into query
        if($offset != 0){
        foreach ($order_by as $key => $value) {
            $qb->add('orderBy', 'l.' . $key . ' ' . $value);
        }}
        $query = $qb->getQuery();
        return $query->getResult();
    }    

    public function GetByConDeudaParamCount() {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('l');     
                
        $qb->select('COUNT(e)')
                ->from('BackendBundle:Cliente', 'e')
                 ->where('e.deuda = true');    
        
        
        
//        print_r($qb->getDQL());
//                die();
        
        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }    

    public function GetByBuscarParamCount($nombres,$parametros) {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('l');      
        foreach ($parametros as $key => $par) {
            if ($parametros[$key] == 'true') {
                $parametros[$key] = 1;
            } elseif ($parametros[$key] == 'false') {
                $parametros[$key] = 0;
            }
        }       
        
        $qb->select('COUNT(e)')
                ->from('BackendBundle:Cliente', 'e');
//                 ->where('e.nombre LIKE :name1 and e.deuda = :deuda1')
//                ->setParameter('name1', '%' . $parametros[0] . '%')
//                ->setParameter('deuda1', $parametros[1]);

       $sent='';
        foreach ($parametros as $key=>$par){
            if ($key==0) {
                $sent = 'e.' . $nombres[$key] . ' LIKE :' . $nombres[$key] . '1';
            }
            else{
               $sent = $sent . ' and e.' . $nombres[$key] . ' = :' . $nombres[$key] . '1'; 
            }                   
        }
        $qb->where($sent); 
        
                       
        foreach ($parametros as $key=>$par){
            if ($key==0) {
                $qb->setParameter( $nombres[$key] . '1', '%' . $parametros[$key] . '%');
            }
            else{
                 $qb->setParameter($nombres[$key]. '1', $parametros[$key] );              
            }                   
        }
                        
//        print_r( $qb->getDQL());
//                die();
        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }
    
     public function GetByBuscarParam($nombres,$parametros, $order_by = 0, $offset = 0, $limit = 0) {
        $em = $this->getEntityManager();

        foreach ($parametros as $key => $par) {
            if ($parametros[$key] == 'true') {
                $parametros[$key] = 1;
            } elseif ($parametros[$key] == 'false') {
                $parametros[$key] = 0;
            }
        }
        
        $qb = $em->createQueryBuilder('l');       
         $qb->select('e')
                ->from('BackendBundle:Cliente', 'e');
//                 ->where('e.nombre LIKE :name1 and e.deuda = :deuda1')
//                ->setParameter('name1', '%' . $parametros[0] . '%')
//                ->setParameter('deuda1', $parametros[1]);
                
        $sent='';
        foreach ($parametros as $key=>$par){
            if ($key==0) {
                $sent = 'e.' . $nombres[$key] . ' LIKE :' . $nombres[$key] . '1';
            }
            else{
               $sent = $sent . ' and e.' . $nombres[$key] . ' = :' . $nombres[$key] . '1'; 
            }                   
        }
        $qb->where($sent); 
        
                       
        foreach ($parametros as $key=>$par){
            if ($key==0) {
                $qb->setParameter($nombres[$key] . '1', '%' . $parametros[$key] . '%');
            }
            else{
                 $qb->setParameter($nombres[$key]. '1', $parametros[$key] );              
            }                   
        }
        
//                print_r($qb->getDQL());
//                die();
        
        //Show all if offset and limit not set, also show all when limit is 0
        if ((isset($offset)) && (isset($limit))) {
            if ($limit > 0) {
                $qb->setFirstResult($offset);
                $qb->setMaxResults($limit);
            }           
        }
        //Adding defined sorting parameters from variable into query
        if($offset != 0){
        foreach ($order_by as $key => $value) {
            $qb->add('orderBy', 'l.' . $key . ' ' . $value);
        }}
        $query = $qb->getQuery();
        return $query->getResult();
    }
    
    ////////////error fix functions
    
     public function GeneralClientesFix() {
        $em = $this->getEntityManager();
        $dql = "SELECT v FROM BackendBundle:Cliente v"
                . " where v.deuda = true";
        $consulta = $em->createQuery($dql);
        $clientes = $consulta->getResult();

        foreach ($clientes as $key => $cliente) {
            if ($cliente->getMontodeuda() < 1) {
                $cliente->setDeuda(false);
                $cliente->setMontodeuda(0);
                $em->persist($cliente);
                $em->flush();
            }
        }
        return true;
    }

   

}
