<?php

namespace Sistemadmin\BackendBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Filesystem\Exception\IOExceptionInterface;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Query\Parameter;

/**
 * VendedorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VendedorRepository extends EntityRepository
{
     public function Create($vendedor) {
        $em = $this->getEntityManager();
        if (!$this->VendedorExist($vendedor)) {
            $vendedor->setImagename('initial');
             $em->persist($vendedor);
            $em->flush();
            
            //upload
            $finalname=$vendedor->getId();
            $vendedor->upload($finalname);     
            
//            $articulo->setPath($finalname);
            $em->persist($vendedor);
            $em->flush();
            
            return true;
        }  else {
            return false;
        }
    }
    
      protected function VendedorExist($vendedor) {
          $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('b')
                ->from('BackendBundle:Vendedor', 'b')
                ->where('b.nombre = :name')
                ->setParameters(new ArrayCollection(array(
                    new Parameter('name', $vendedor->getNombre()))));
        $query = $qb->getQuery();
        $vendedors = $query->getResult();

        foreach ($vendedors as $br) {
            if ($br->getId() === $vendedor->getId()) {
                return false;
            }
        }

        if (\count($vendedors)) {
            return true;
        }
        return false;    
    }
    
       public function GetByParam( $order_by = 0, $offset = 0, $limit = 0) {
        $em = $this->getEntityManager();

        $qb = $em->createQueryBuilder('l');       
        $qb->select('e')
                ->from('BackendBundle:Vendedor', 'e')
                ->where('e.utilizado != false or e.utilizado IS NULL');
        
        
        //Show all if offset and limit not set, also show all when limit is 0
        if ((isset($offset)) && (isset($limit))) {
            if ($limit > 0) {
                $qb->setFirstResult($offset);
                $qb->setMaxResults($limit);
            }           
        }
        //Adding defined sorting parameters from variable into query
        if($offset != 0){
        foreach ($order_by as $key => $value) {
            $qb->add('orderBy', 'l.' . $key . ' ' . $value);
        }}
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function GetByParamCount() {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('l');       
        $qb->select('COUNT(e)')
                ->from('BackendBundle:Vendedor', 'e')
                ->where('e.utilizado != false or e.utilizado IS NULL');
        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }
   
        public function Delete($vendedor) {
        $em = $this->getEntityManager();   
//        $em->remove($vendedor);
//        $em->flush();
        $vendedor->setUtilizado(false);
        $em->flush();
        return true;
    }
    
    public function getVentasPorVendedor($params) {
        $em = $this->getEntityManager();
       $dql = "SELECT av,v,a FROM BackendBundle:ArticuloVenta av
          JOIN av.venta v
          JOIN av.articulo a
          where v.finalizada=true and v.vendedor=:vend and v.fecha<=:ff and v.fecha>=:fi and (v.anulada = false or v.anulada IS NULL)";
        $consulta = $em->createQuery($dql)
            ->setParameter('fi', $params['fechai'] )
            ->setParameter('ff', $params['fechaf'] )
            ->setParameter('vend', $params['vendedor'] );
        return $consulta->getResult();

    }
    
      ////search functions///////////////

//    public function GetByFechaDiariaParam($fecha1, $order_by = 0, $offset = 0, $limit = 0) {
//        $em = $this->getEntityManager();
//
//        $qb = $em->createQueryBuilder('l');       
//        $qb->select('e')
//                ->from('BackendBundle:Venta', 'e')
//                ->where('e.fecha = :fecha1')
//        ->setParameter('fecha1', $fecha1 );
//                
//        $query = $qb->getQuery();
//        $ventas= $query->getResult();
//
//        //aqui extraigo los vendedores de las ventas en la fecha buscada
//       $vendedores= Array();       
//        foreach($ventas as $keyforeach=>$v){
//            $vend_temp = $v->getVendedor();
////            $result = array_search($vend_temp, $vendedores );
//            $result =in_array($vend_temp, $vendedores );            
//            if ($result == null) {                
//                $vendedores[] = $vend_temp;
//            }
//        }
//        $ventasporvendedor= Array();  
//        foreach ($vendedores as $keyforeach => $vende) {
//            $vendido=0;
//            foreach ($ventas as $keyforv => $venta) {
//                if($vende->getId() == $venta->getVendedor()->getId()){
//                    $vendido= $vendido + $venta->getMontototalapagar();
//                }
//            }
//            $ventasporvendedor[] = $vendido;
//        }
//
//        $repons = array( 'vendedores' => $vendedores,'vendido' =>$ventasporvendedor);
//       
//        return $repons;
//        
//    }
//
//    public function GetByFechaDiariaParamCount($fecha1) {
//        $em = $this->getEntityManager();
//
//        $qb = $em->createQueryBuilder('l');       
//        $qb->select('e')
//                ->from('BackendBundle:Venta', 'e')
//                ->where('e.fecha = :fecha1')
//        ->setParameter('fecha1', $fecha1 );
//                
//        $query = $qb->getQuery();
//        $ventas= $query->getResult();
//
//        //aqui extraigo los vendedores de las ventas en la fecha buscada
//       $vendedores= Array();       
//        foreach($ventas as $keyforeach=>$v){
//            $vend_temp = $v->getVendedor();
////            $result = array_search($vend_temp, $vendedores );
//            $result =in_array($vend_temp, $vendedores );            
//            if ($result == null) {                
//                $vendedores[] = $vend_temp;
//            }
//        }
//        
//        return count($vendedores);
//    }
    
    public function GetByFechaRangoParam($fecha1, $fecha2,$order_by = 0, $offset = 0, $limit = 0) {
        $em = $this->getEntityManager();

        $qb = $em->createQueryBuilder('l');       
        $qb->select('e')
                ->from('BackendBundle:Venta', 'e')
                ->where('e.fecha >= :fecha1 and e.fecha<=:fecha2 and e.finalizada=true and (e.anulada = false or e.anulada IS NULL)')
        ->setParameter('fecha1', $fecha1)
                ->setParameter('fecha2', $fecha2 );
                
         $query = $qb->getQuery();
        $ventas = $query->getResult();
        
        //aqui extraigo los vendedores de las ventas en la fecha buscada
       $vendedores= Array();       
        foreach($ventas as $keyforeach=>$v){
            $vend_temp = $v->getVendedor();
//            $result = array_search($vend_temp, $vendedores );
            $result =in_array($vend_temp, $vendedores );            
            if ($result == null) {                
                $vendedores[] = $vend_temp;
            }
        }
        $ventasporvendedor= Array();  
        foreach ($vendedores as $keyforeach => $vende) {
            $vendido=0;
            foreach ($ventas as $keyforv => $venta) {
                if($vende->getId() == $venta->getVendedor()->getId()){
                    $vendido= $vendido + $venta->getMontototalapagar();
                }
            }
            $ventasporvendedor[] = $vendido;
        }

        $repons = array( 'vendedores' => $vendedores,'vendido' =>$ventasporvendedor);
       
        return $repons;
    }

    public function GetByFechaRangoParamCount($fecha1,$fecha2) {
        $em = $this->getEntityManager();

        $qb = $em->createQueryBuilder('l');       
        $qb->select('e')
                ->from('BackendBundle:Venta', 'e')
                ->where('e.fecha >= :fecha1 and e.fecha<=:fecha2 and e.finalizada=true and (e.anulada = false or e.anulada IS NULL)')
        ->setParameter('fecha1', $fecha1)
                ->setParameter('fecha2', $fecha2 );
         $query = $qb->getQuery();        
        $ventas = $query->getResult();
        
        //aqui extraigo los vendedores de las ventas en la fecha buscada
       $vendedores= Array();       
        foreach($ventas as $keyforeach=>$v){
            $vend_temp = $v->getVendedor();
//            $result = array_search($vend_temp, $vendedores );
            $result =in_array($vend_temp, $vendedores );            
            if ($result == null) {                
                $vendedores[] = $vend_temp;
            }
        }
        return count($vendedores);
    }    
    
    
}
