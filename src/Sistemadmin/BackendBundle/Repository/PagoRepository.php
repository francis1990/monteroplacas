<?php

namespace Sistemadmin\BackendBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * PagoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PagoRepository extends EntityRepository
{
    public function Create($pago) {
        $em = $this->getEntityManager();

        $numerofactura = $pago->getNumerofactura();
         $serie = $pago->getSerie();
        $arreglo = $em->getRepository('BackendBundle:Deuda')->GetBySerieAndDocumento( $serie, $numerofactura);
       $deuda = $arreglo[0];
        if ($deuda == null) {
            return false;
        }else{
//        $deuda = $em->getRepository('BackendBundle:Deuda')->findOneByNumerofactura($numerofactura);
        $montodeuda = $deuda->getDeuda();
        $pago->setTotalapagar($montodeuda);
        $diferencia= - $pago->getMontopagado();
                
        $quedaporpagar = $montodeuda + $diferencia;
        $venta=  $em->getRepository('BackendBundle:Venta')->GetBySerieDocumentoCliente( $pago->getSerie(), $pago->getNumerofactura(),$pago->getCliente());
//        $venta= $em->getRepository('BackendBundle:Venta')->findBy(array('serie'=>$pago->getSerie(),'numerodedocumento'=>$pago->getNumerofactura()));
        

        if ($quedaporpagar < 1) {
            //cancelar deuda
            $this->CancelDeuda($deuda, $pago,$diferencia,$venta[0]);
        } else {
            //reducir deuda
            $this->ReduceDeuda($deuda, $pago,$diferencia,$venta[0]);
            $acumulado = $pago->getMontopagado() + $venta[0]->getTotalrecibido();
            
         $venta[0]->setTotalrecibido($acumulado);         
          $em->persist($pago);
            $em->flush();
          $em->persist($venta[0]);          
        $em->flush();
        }
        
        return true;}
    }
    
    public function Update($pago) {
        $em = $this->getEntityManager();
        $query0 = $em->createQuery(
                        'SELECT u.montopagado
                            FROM BackendBundle:Pago u
                            WHERE u.id = :id'
                )->setParameter('id', $pago->getId());
        $montopagadoprevio = $query0->getResult();
        
        $numerofactura = $pago->getNumerofactura();
        $serie = $pago->getSerie();
        $query0 = $em->createQuery(
                        'SELECT u
                            FROM BackendBundle:Deuda u
                            WHERE u.serie = :serie and u.numerofactura = :numerofactura'
                )->setParameter('serie', $serie)
                ->setParameter('numerofactura', $numerofactura);
        $deudas= $query0->getResult();
        $deuda = $deudas[0];//$this->getEntityManager()->getRepository('BackendBundle:Deuda')->findOneByNumerofactura($numerofactura);
        $montodeuda = $deuda->getDeuda();        
       
        $diferencia = $montopagadoprevio[0]['montopagado'] - $pago->getMontopagado();
        $quedaporpagar = $montodeuda + $diferencia;
        $venta= $em->getRepository('BackendBundle:Venta')->findBy(array('serie'=>$pago->getSerie(),'numerodedocumento'=>$pago->getNumerofactura(),'cliente'=>$pago->getCliente()));
//            print_r($quedaporpagar);die;
//        print_r($quedaporpagar);die();
        if ($quedaporpagar < 1) {
            //cancelar deuda            
            $this->CancelDeuda($deuda, $pago, $diferencia,$venta[0]);
        } else {
            //reducir deuda
            $this->ReduceDeuda($deuda, $pago, $diferencia,$venta[0]);
            $acumuladoactual =$venta->getMontopagado()-$montopagadoprevio[0]['montopagado']+$pago->getMontopagado();
        $venta[0]->setTotalrecibido($acumuladoactual);
          $em->persist($venta);
          $em->persist($pago);
        $em->flush();
        }

        return true;
    }
    
    public function Delete($pago) {        
        $em = $this->getEntityManager();                
        $numerofactura = $pago->getNumerofactura();
        $deuda = $em->getRepository('BackendBundle:Deuda')->findOneByNumerofactura($numerofactura);
        $montopago = $pago->getMontopagado();
        $venta=  $em->getRepository('BackendBundle:Venta')->GetBySerieDocumentoCliente( $pago->getSerie(), $pago->getNumerofactura(),$pago->getCliente());
        $this->RestituyeDeuda($deuda, $montopago,$venta[0]) ;
        $em->remove($pago);
        $em->flush();

        return true;
    }

    //reduce la deuda, pone en el pago que aun tiene deuda y reduce el monto que debe el cliente
    function ReduceDeuda($deuda,$pago, $diferencia,$venta) {
       
        $em = $this->getEntityManager();        
        $pago->setFechacancelacion(null);
        $pago->setTotalapagar($deuda->getTotalapagar());
        $pago->setTienedeuda(true);
        
                
        //$deuda->setTotalapagar($deuda->getTotalapagar()+$diferencia);
        $deudacash=$venta->getMontototalapagar() - ($pago->getMontopagado() + $venta->getTotalrecibido());
        $deuda->setDeuda($deudacash);
        $em->persist($deuda);
        $em->flush();
        
        $cliente = $deuda->getCliente();
        $totaldeuda = $cliente->getMontodeuda()- $pago->getMontopagado() ;
        $cliente->setMontodeuda($totaldeuda);
        $em->persist($cliente);
        $em->flush();
        
        return true;
    }    
   
        //cancela deuda y pone la fecha de cancelacion en el pago
    function CancelDeuda($deuda,$pago, $diferencia,$venta) {
        $em = $this->getEntityManager();
        $deuda->setDeuda(0);
        $deuda->setTienedeuda(false);
        $deuda->setFechacancelacion(new \DateTime());
        $em->persist($deuda);
        $em->flush();
        $pago->setFechacancelacion(new \DateTime());
        $pago->setTienedeuda(false);
        $em->persist($pago);
        $em->flush();
         
        //si la deuda es activa ver si es la unica del cliente 
        $cliente = $deuda->getCliente();
//        $query3 = $em->createQuery(
//                        'SELECT COUNT(u.id)
//                                    FROM BackendBundle:Cliente u
//                                    WHERE u.id = :id AND u.deuda = true'
//                )->setParameter('id', $cliente->getId());
//
//        $numerodedeudasactivas = $query3->getSingleScalarResult();

        $totaldeuda = $cliente->getMontodeuda() + $diferencia;
        $cliente->setMontodeuda($totaldeuda);
        if ($totaldeuda == 0) {
            $cliente->setDeuda(0);
        }
        $em->persist($cliente);
        $venta->setTotalrecibido($venta->getMontototalapagar());
        $em->persist($venta);
        $em->flush();
        
        return true;
    }
    
    //reduce la deuda, pone en el pago que aun tiene deuda y reduce el monto que debe el cliente
    function RestituyeDeuda($deuda, $montopago,$ventan) {
        $em = $this->getEntityManager();        
         $montodeuda  =   $deuda->getDeuda() +  $montopago;
       // $deuda->setTotalapagar($montodeuda);
        $deuda->setDeuda($montodeuda);
        $deuda->setFechacancelacion(null);
        $deuda->setTienedeuda(true);
        $em->persist($deuda);
        if($deuda->getTotalapagar()==$montodeuda)
        {

            $qb = $em->createQueryBuilder();
            $qb->select('b')
                ->from('BackendBundle:Venta', 'b')
                ->where('b.numerodedocumento = :numero and b.serie = :serie')
                ->setParameter('numero',$deuda->getNumerofactura())
                ->setParameter('serie',$deuda->getSerie());

            $query = $qb->getQuery();
            $ventas = $query->getResult();

          $ve=  $ventas[0];

          $ve->setTotalrecibido(0);

            $em->persist($ve);
        }
        $em->flush();
        
        $cliente = $deuda->getCliente();
        $totaldeuda = $cliente->getMontodeuda() + $montopago;
        $cliente->setMontodeuda($totaldeuda);
        $cliente->setDeuda(1);
        $em->persist($cliente);
        $em->flush();
        
        $ventan->setTotalrecibido($deuda->getTotalPagado());
        $em->persist($ventan);
        $em->flush();
        
        
        return true;
    }
    
 //////////paginator     
      public function GetByParam( $order_by = 0, $offset = 0, $limit = 0) {
        $em = $this->getEntityManager();

        $qb = $em->createQueryBuilder('l');       
        $qb->select('e')
                ->from('BackendBundle:Pago', 'e');
        
        
        //Show all if offset and limit not set, also show all when limit is 0
        if ((isset($offset)) && (isset($limit))) {
            if ($limit > 0) {
                $qb->setFirstResult($offset);
                $qb->setMaxResults($limit);
            }           
        }
        //Adding defined sorting parameters from variable into query
        if($offset != 0){
        foreach ($order_by as $key => $value) {
            $qb->add('orderBy', 'l.' . $key . ' ' . $value);
        }}
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function GetByParamCount() {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('l');       
        $qb->select('COUNT(e)')
                ->from('BackendBundle:Pago', 'e');    
        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }

    public function montoPagado($serie,$numdocumento) {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('l');
        $qb->select('Sum(e.montopagado)')
            ->from('BackendBundle:Pago', 'e')
            ->where('e.serie = :serie and e.numerofactura=:numdocumento')
            ->setParameter('serie', $serie)
            ->setParameter('numdocumento', $numdocumento );
            $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }
    
    public function getPagosPorFecha($params) {
        $em = $this->getEntityManager();
       $dql = "SELECT v FROM BackendBundle:Pago v
          where v.fechapago<=:ff and v.fechapago>=:fi";
        $consulta = $em->createQuery($dql)
            ->setParameter('fi', $params['fechai'] )
            ->setParameter('ff', $params['fechaf'] );
        return $consulta->getResult();
    }
    
   /////////search functions
    
    
    public function GetByFechaDiariaParam($fecha1, $order_by = 0, $offset = 0, $limit = 0) {
        $em = $this->getEntityManager();

        $qb = $em->createQueryBuilder('l');       
        $qb->select('e')
                ->from('BackendBundle:Pago', 'e')
                ->where('e.fechapago = :fecha1')
                 ->orderBy('e.fechapago','desc')
        ->setParameter('fecha1', $fecha1 );
        
        
        //Show all if offset and limit not set, also show all when limit is 0
        if ((isset($offset)) && (isset($limit))) {
            if ($limit > 0) {
                $qb->setFirstResult($offset);
                $qb->setMaxResults($limit);
            }           
        }
        //Adding defined sorting parameters from variable into query
//        if($offset != 0){
//        foreach ($order_by as $key => $value) {
//            $qb->add('orderBy', 'l.' . $key . ' ' . $value);
//        }}
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function GetByFechaDiariaParamCount($fecha1) {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('l');       
        $qb->select('COUNT(e)')
                ->from('BackendBundle:Pago', 'e')
                ->where('e.fechapago = :fecha1 ')
                 ->orderBy('e.fechapago','desc')
        ->setParameter('fecha1',$fecha1);    
        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }
    
    public function GetByFechaRangoParam($fecha1, $fecha2,$order_by = 0, $offset = 0, $limit = 0) {
        $em = $this->getEntityManager();

        $qb = $em->createQueryBuilder('l');       
        $qb->select('e')
                ->from('BackendBundle:Pago', 'e')
                ->where('e.fechapago >= :fecha1 and e.fechapago<=:fecha2 ')
        ->setParameter('fecha1', $fecha1)
                ->setParameter('fecha2', $fecha2 )
                 ->orderBy('e.fechapago','desc');
        
        
        //Show all if offset and limit not set, also show all when limit is 0
        if ((isset($offset)) && (isset($limit))) {
            if ($limit > 0) {
                $qb->setFirstResult($offset);
                $qb->setMaxResults($limit);
            }           
        }
        //Adding defined sorting parameters from variable into query
//        if($order_by!=0){
//        foreach ($order_by as $key => $value) {
//            $qb->add('orderBy', 'l.' . $key . ' ' . $value);
//        }}
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function GetByFechaRangoParamCount($fecha1,$fecha2) {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('l');       
        $qb->select('COUNT(e)')
                ->from('BackendBundle:Pago', 'e')
                ->where('e.fechapago >= :fecha1 and e.fechapago<=:fecha2 ')
        ->setParameter('fecha1', $fecha1 )
               ->setParameter('fecha2', $fecha2 )
                 ->orderBy('e.fechapago','desc');
        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }        
    
    
    ////////////error fix functions
    
     public function GeneralPagosFix() {
        $em = $this->getEntityManager();
        $dql = "SELECT v FROM BackendBundle:Pago v"
                . " where v.tienedeuda = true";
        $consulta = $em->createQuery($dql);
        $pagos = $consulta->getResult();

        foreach ($pagos as $key => $pago) {
            if ($pago->getMontopagado() >= $pago->getTotalapagar()) {
                $pago->setTienedeuda(false);
                $em->persist($pago);
                $em->flush();
            }
        }
        return true;
    }

}
