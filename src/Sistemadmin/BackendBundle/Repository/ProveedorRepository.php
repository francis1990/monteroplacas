<?php

namespace Sistemadmin\BackendBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ProveedorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProveedorRepository extends EntityRepository
{
    public function GetByParam($order_by = 0, $offset = 0, $limit = 0) {
        $em = $this->getEntityManager();

        $qb = $em->createQueryBuilder('l');
        $qb->select('e')
                ->from('BackendBundle:Proveedor', 'e')
                ->where('e.utilizado != false or e.utilizado IS NULL'); 


        //Show all if offset and limit not set, also show all when limit is 0
        if ((isset($offset)) && (isset($limit))) {
            if ($limit > 0) {
                $qb->setFirstResult($offset);
                $qb->setMaxResults($limit);
            }
        }
        //Adding defined sorting parameters from variable into query
        if ($offset != 0) {
            foreach ($order_by as $key => $value) {
                $qb->add('orderBy', 'l.' . $key . ' ' . $value);
            }
        }
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function GetByParamCount() {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('l');
        $qb->select('COUNT(e)')
                ->from('BackendBundle:Proveedor', 'e')
                ->where('e.utilizado != false or e.utilizado IS NULL'); 
        
        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }
    
    public function Delete($proveedor) {
        $em = $this->getEntityManager();   
        
        $proveedor->setUtilizado(false);
        $em->flush();
        return true;
        
//        $em->remove($proveedor);
//        $em->flush();
//        return true;
    }

}
