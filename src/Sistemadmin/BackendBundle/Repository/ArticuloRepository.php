<?php

namespace Sistemadmin\BackendBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Filesystem\Exception\IOExceptionInterface;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Query\Parameter;

/**
 * ArticuloRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticuloRepository extends EntityRepository
{
    public function Create($articulo) {
        $em = $this->getEntityManager();
        if (!$this->ArticuloExist($articulo)) {
            $articulo->setPath('initial');
             $em->persist($articulo);
            $em->flush();
            
            //upload
            $finalname=$articulo->getId();
            $articulo->upload($finalname);     
            
//            $articulo->setPath($finalname);
            $em->persist($articulo);
            $em->flush();
            
            return true;
        }  else {
            return false;
        }
    }
    
     protected function ArticuloExist($articulo) {
         $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('b')
                ->from('BackendBundle:Articulo', 'b')
                ->where('b.nombre = :name')
                ->setParameters(new ArrayCollection(array(
                    new Parameter('name', $articulo->getNombre()))));
        $query = $qb->getQuery();
        $articulos = $query->getResult();

        foreach ($articulos as $br) {
            if ($br->getId() === $articulo->getId()) {
                return false;
            }
        }

        if (\count($articulos)) {
            return true;
        }
        return false;         
    }
    
    public function GetByParam( $order_by = 0, $offset = 0, $limit = 0) {
        $em = $this->getEntityManager();

        $qb = $em->createQueryBuilder('l');       
        $qb->select('e')
                ->from('BackendBundle:Articulo', 'e')
                ->where('e.utilizado != false or e.utilizado IS NULL');
        
        
        //Show all if offset and limit not set, also show all when limit is 0
        if ((isset($offset)) && (isset($limit))) {
            if ($limit > 0) {
                $qb->setFirstResult($offset);
                $qb->setMaxResults($limit);
            }           
        }
        //Adding defined sorting parameters from variable into query
        if($offset != 0){
        foreach ($order_by as $key => $value) {
            $qb->add('orderBy', 'l.' . $key . ' ' . $value);
        }}
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function GetByParamCount() {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('l');       
        $qb->select('COUNT(e)')
                ->from('BackendBundle:Articulo', 'e')
                ->where('e.utilizado != false or e.utilizado IS NULL'); 
        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }
   
    
        public function Delete($articulo) {
            
        $em = $this->getEntityManager();
        
        //esto es para eliminarlo
//        $filesystem = new Filesystem();
//        $root = 'gallery/articulo/' . ($articulo->getPath());        
//        if ($filesystem->exists($root) && $articulo->getPath() != null) {
//            $filesystem->remove($root);
//        }
//                
//        $em->remove($articulo);
//        $em->flush();
        
        //esto es para inhabilitarlo
        $articulo->setUtilizado(false);
        $em->flush();
        return true;
    }

     public function GetByBuscarParamCount($nombres,$parametros) {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder('l');      
        foreach ($parametros as $key => $par) {
            if ($parametros[$key] == 'true') {
                $parametros[$key] = 1;
            } elseif ($parametros[$key] == 'false') {
                $parametros[$key] = 0;
            }
        }       
        
        $qb->select('COUNT(e)')
                ->from('BackendBundle:Articulo', 'e');
//                 ->where('e.nombre LIKE :name1 and e.deuda = :deuda1')
//                ->setParameter('name1', '%' . $parametros[0] . '%')
//                ->setParameter('deuda1', $parametros[1]);

       $sent='';
        foreach ($parametros as $key=>$par){
            if ($key==0) {
                $sent = 'e.' . $nombres[$key] . ' LIKE :' . $nombres[$key] . '1';
            }
            else{
               $sent = $sent . ' and e.' . $nombres[$key] . ' = :' . $nombres[$key] . '1'; 
            }                   
        }
        $qb->where('(e.utilizado  != false or e.utilizado IS NULL) and ' . $sent); 
        
                       
        foreach ($parametros as $key=>$par){
            if ($key==0) {
                $qb->setParameter( $nombres[$key] . '1', '%' . $parametros[$key] . '%');
            }
            else{
                 $qb->setParameter($nombres[$key]. '1', $parametros[$key] );              
            }                   
        }
                        
//        print_r( $qb->getDQL());
//                die();
        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }
    
     public function GetByBuscarParam($nombres,$parametros, $order_by = 0, $offset = 0, $limit = 0) {
        $em = $this->getEntityManager();

        foreach ($parametros as $key => $par) {
            if ($parametros[$key] == 'true') {
                $parametros[$key] = 1;
            } elseif ($parametros[$key] == 'false') {
                $parametros[$key] = 0;
            }
        }
        
        $qb = $em->createQueryBuilder('l');       
         $qb->select('e')
                ->from('BackendBundle:Articulo', 'e');
//                 ->where('e.nombre LIKE :name1 and e.deuda = :deuda1')
//                ->setParameter('name1', '%' . $parametros[0] . '%')
//                ->setParameter('deuda1', $parametros[1]);
                
        $sent='';
        foreach ($parametros as $key=>$par){
            if ($key==0) {
                $sent = 'e.' . $nombres[$key] . ' LIKE :' . $nombres[$key] . '1';
            }
            else{
               $sent = $sent . ' and e.' . $nombres[$key] . ' = :' . $nombres[$key] . '1'; 
            }                   
        }
        $qb->where('(e.utilizado  != false or e.utilizado IS NULL) and ' . $sent); 
        
                       
        foreach ($parametros as $key=>$par){
            if ($key==0) {
                $qb->setParameter($nombres[$key] . '1', '%' . $parametros[$key] . '%');
            }
            else{
                 $qb->setParameter($nombres[$key]. '1', $parametros[$key] );              
            }                   
        }
        
//                print_r($qb->getDQL());
//                die();
        
        //Show all if offset and limit not set, also show all when limit is 0
        if ((isset($offset)) && (isset($limit))) {
            if ($limit > 0) {
                $qb->setFirstResult($offset);
                $qb->setMaxResults($limit);
            }           
        }
        //Adding defined sorting parameters from variable into query
        if($offset != 0){
        foreach ($order_by as $key => $value) {
            $qb->add('orderBy', 'l.' . $key . ' ' . $value);
        }}
        $query = $qb->getQuery();
        return $query->getResult();
    }

    
    /**
    public function findBuscadorArticulos($fechainicio,$fechafinal,$marca,$nombre) {

        $query= $this-> queryBuscadorArticulos($fechainicio,$fechafinal,$marca,$nombre);
        $prueba = $query->getResult();

        return $prueba;

    }

    public function queryBuscadorArticulos($fechainicio,$fechafinal,$marca,$nombre) {

        $qb = $this->createQueryBuilder('c');
        $qb->add('select', 'c')
            ->add('where', '2 = :siempre')
            ->setParameter('siempre', '2');


        if ($fechainicio!="Todos") {
            $qb ->andWhere( 'c.fechacompra > :fechainicio')
                ->setParameter('fechainicio', $fechainicio);

        }
        if ($fechafinal!="Todos") {
            $qb ->andWhere( 'c.fechacompra < :fechafinal')
                ->setParameter('fechafinal', $fechafinal);

        }
        if ($marca!="Todos") {
            $qb ->andWhere( 'c.marca = :marca')
                ->setParameter('marca', $marca);

        }

        if ($nombre!="Todos") {
            $qb ->andWhere( 'c.nombre = :nombre')
                ->setParameter('nombre', $nombre);

        }

        $query = $qb->getQuery();
        return $query;
    }

    public function queryTodosLosArticulosporNombre($nombre, $limit, $offset) {
        $em = $this->getEntityManager();


        $consulta = $em->createQuery('SELECT c FROM BackendBundle:Articulo c WHERE p.nombre LIKE :nombre');
        $consulta->setParameter('nombre', '%' . $nombre . '%');



        $consulta->setMaxResults($limit);
        $consulta->setFirstResult($offset);
        return $consulta;
    }

    public function findTodosLosArticulosporNombre($nombre,$limit,$offset) {
        return $this->queryTodosLosArticulosporNombre($nombre,$limit,$offset)->getResult();
    }
  *  */
}
