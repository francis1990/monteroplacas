<?php

namespace InventarioBundle\Repository;

use Doctrine\ORM\EntityRepository;
use InventarioBundle\Entity\Movimiento;
use InventarioBundle\Entity\Transferencia;
use Sistemadmin\BackendBundle\Entity\ArticuloCompra;
use Sistemadmin\BackendBundle\Entity\ArticuloVenta;

/**
 * MovimientoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MovimientoRepository extends EntityRepository
{

    public function findMovimientosByFecha($params)
    {
        $where = '1=1 ';
        $params=is_null($params)?array():$params;
        $where .= isset($params['ffin']) ? " and m.fecha <=:ffin " : '';
        $where .= isset($params['fini']) ? " and m.fecha >=:fini " : '';
        $where .= isset($params['articulo']) ? " and art.id =:articulo " : '';
        $where .= isset($params['seccion']) ? " and sec.id =:seccion " : "";
        $where .= isset($params['motivo']) ? " and mot.id =:motivo " : "";
        $em = $this->getEntityManager();
        $dql = "SELECT m,art,sec,mot
            FROM InventarioBundle:Movimiento m
            JOIN m.articulo art
            join m.seccion sec
            join m.motivo mot
            WHERE " . $where;
        $consulta = $em->createQuery($dql);
        if (count($params) > 0)
            $consulta->setParameters($params);
        $lista = $consulta->getResult();
        return $lista;

    }

    public function getInventarioArticulos($seccion = null, $fecha = null, $order = false, $groupArt = false,$articulo=null,$rango=true)
    {
        $wr=' where 1=1';
        $hav = !is_null($seccion) ? ' HAVING sec.id=:sec' : '';
        $wr .= !is_null($fecha) ? $rango ? ' and m.fecha<=:fecha':' and m.fecha =:fecha' : '';
        $wr .= !is_null($articulo) ? ' and art.id =:articulo' : '';
        $orderBy = $order ? ' ORDER BY art.id' : '';
        if($groupArt){
            $groupBy=' GROUP BY m.articulo';
            $select='';
            $hav='';
            $wr.=!is_null($seccion) ? ' and sec.id=:sec':'';
        }
        else{
            $groupBy=' GROUP BY m.seccion, m.articulo';
            $select=', sec.id as sid, sec.nombre as snom, alm.nombre as alnom';
        }
        $em = $this->getEntityManager();
        $dql = "SELECT SUM(m.cantidad*mot.tipo) as existencia ,
              art.id as aid,
              art.nombre as anom".$select."
            FROM InventarioBundle:Movimiento m
            left JOIN m.articulo art
            left join m.seccion sec
            left join m.motivo mot
            left JOIN sec.almacen alm" . $wr . $groupBy . $hav . $orderBy;

        $consulta = $em->createQuery($dql);
        if (!is_null($seccion))
            $consulta->setParameter('sec', $seccion);
        if (!is_null($fecha))
            $consulta->setParameter('fecha', $fecha);
        if (!is_null($articulo))
            $consulta->setParameter('articulo', $articulo);
        $lista = $consulta->getResult();

        return $lista;
    }

    public function getInventarioDiarioMenu($seccion,$fecha,$articulo)
    {
        $em = $this->getEntityManager();
        $movs = $this->getInventarioArticulos($seccion, $fecha, true, true,$articulo,false);
        $data = array();
        foreach ($movs as $key => $m) {
            $art = $em->getRepository('BackendBundle:Articulo')->find($m['aid']);
            $porveedores = $art->getProveedor();
            $provee = array();
            foreach ($porveedores as $value) {
                $provee[] = $value->getNombre();
            }
            $ingmat = $em->getRepository('InventarioBundle:Movimiento')->getInventarioPorTipo(1,null, $m['aid'], $fecha);
            $usodia = $em->getRepository('InventarioBundle:Movimiento')->getInventarioPorTipo(-1, null, $m['aid'], $fecha);
            $sant = $m['existencia'] + $usodia - $ingmat;
            $data[] = array(
                $art->getNombre(),
                $sant == 0 ? '0' : $sant < 0 ? -$sant : $sant,
                $ingmat == 0 ? '0' : $ingmat < 0 ? -$ingmat : $ingmat,
                ($sant + $ingmat) < 0 ? -($sant + $ingmat) : ($sant + $ingmat),
                $usodia == 0 ? '0' : $usodia < 0 ? -$usodia : $usodia,
                $m['existencia'],
                implode(";", $provee),
                $art->getId()
            );
        }
        return $data;
    }

    public function getInventarioGeneralMenu($seccion, $fecha,$articulo)
    {
        $em = $this->getEntityManager();
        $movs = $this->getInventarioArticulos($seccion, $fecha, false, false,$articulo);
        $data = array();
        foreach ($movs as $key => $m) {
            $totalentrada = $em->getRepository('InventarioBundle:Movimiento')->getInventarioPorTipo(1, $m['sid'], $m['aid']);
            $totalsalida = $em->getRepository('InventarioBundle:Movimiento')->getInventarioPorTipo(-1, $m['sid'], $m['aid']);
            $data[] = array(
                $m['anom'],
                $m['alnom'],
                $m['snom'],
                $m['existencia'],
                $totalentrada,
                $totalsalida,
            );
        }

        return $data;
    }

    public function getInventarioPorTipo($tipo, $sec, $art, $fecha = null)
    {
        $wr = '';
        $params = array(
            'art' => $art,
            'tipo' => $tipo
        );
        if (!is_null($fecha)) {
            $wr = ' and m.fecha=:fecha ';
            $params['fecha'] = $fecha;
        }
        if (!is_null($sec)) {
            $wr .= ' and m.seccion=:sec ';
            $params['sec'] = $sec;
        }
        $em = $this->getEntityManager();
        $dql = "SELECT SUM(m.cantidad)  
            FROM InventarioBundle:Movimiento m
             join m.motivo mot
            where  m.articulo=:art and mot.tipo=:tipo
           " . $wr;
        $consulta = $em->createQuery($dql);
        $consulta->setParameters($params);
        $sum = $consulta->getSingleScalarResult();
        return is_null($sum) ? 0 : $sum;

    }

    public function movCompra(Movimiento $mov, ArticuloCompra $entity, $em, $accion)
    {
        if ($accion != 'nuevo') {
            $mov = $em->getRepository("InventarioBundle:Movimiento")->findOneByCompra($entity->getId());
        } else {
            $motivo = $em->getRepository("InventarioBundle:Motivo")->findOneByConceptodefault(1);
            $mov->setMotivo($motivo);
        }
        if (!is_null($mov)) {
            $mov->setArticulo($entity->getArticulo());
            $mov->setCantidad($entity->getCantidad());
            $mov->setCompra($entity);
            $mov->setFecha($entity->getCompra()->getFechacompra());
            $mov->setSeccion($entity->getSeccion());
            return $mov;
        } else {
            return null;
        }
    }

    public function movVenta(Movimiento $mov, ArticuloVenta $entity, $em, $accion)
    {

        if ($accion != 'nuevo') {
            $mov = $em->getRepository("InventarioBundle:Movimiento")->findOneByVenta($entity->getId());
        } else {
            $motivo = $em->getRepository("InventarioBundle:Motivo")->findOneByConceptodefault(2);
            $mov->setMotivo($motivo);
        }
        if (!is_null($mov)) {
            $mov->setArticulo($entity->getArticulo());
            $mov->setCantidad($entity->getCantidad());
            $mov->setVenta($entity);
            $mov->setFecha($entity->getVenta()->getFecha());
            $mov->setSeccion($entity->getSeccion());
            return $mov;
        } else {
            return null;
        }
    }

    public function movTransferencia(Movimiento $mov, Transferencia $entity, $motivo, $em)
    {

        $motivo = $em->getRepository("InventarioBundle:Motivo")->findOneByConceptodefault($motivo);
        $mov->setMotivo($motivo);
        $mov->setFecha($entity->getFecha());
        if ($motivo->getTipo() == 1)
            $mov->setSeccion($entity->getSeccionfin());
        else
            $mov->setSeccion($entity->getSeccionini());
        $mov->setTransferencia($entity);
        $mov->setArticulo($entity->getArticulo());
        $mov->setCantidad($entity->getCantidad());


        return $mov;
    }

    public function findInventarioByFecha($params)
    {
        $where = '1=1 ';
        $where .= isset($params['ffin']) ? " and m.fecha <=:ffin " : '';
        $where .= isset($params['ffin']) ? " and m.fecha <=:ffin " : '';
        $where .= isset($params['articulo']) ? " and art.id =:articulo " : '';
        $where .= isset($params['seccion']) ? " and sec.id =:seccion " : "";
        $em = $this->getEntityManager();
        $dql = "SELECT m,art,sec,mot
            FROM InventarioBundle:Movimiento m
            JOIN m.articulo art
            join m.seccion sec
            join m.motivo mot
            WHERE " . $where;
        $consulta = $em->createQuery($dql);
        if (count($params) > 0)
            $consulta->setParameters($params);
        $lista = $consulta->getResult();
        return $lista;

    }

    public function getExistenciaArticulos($art)
    {
        $em = $this->getEntityManager();
        $dql = "SELECT SUM(m.cantidad*mot.tipo)
            FROM InventarioBundle:Movimiento m
            join m.motivo mot
            WHERE m.articulo = :idart";
        $consulta = $em->createQuery($dql);
        $consulta->setParameter('idart', $art->getId());
        $val = $consulta->getSingleScalarResult();
        return !is_null($val) ? number_format($val, 3) : 0;
    }

    public function getCompraArt($idart)
    {
        $em = $this->getEntityManager();
        $dql = "SELECT DISTINCT (comp.id),comp.id as idcompra,comp.fechacompra,comp.moneda,comp.cantidaddearticulo,comp.montototalpagado,pro.nombre as proveedor
            FROM InventarioBundle:Movimiento m
            JOIN m.compra artc
            JOIN artc.compra comp
            JOIN comp.proveedor pro
            WHERE m.articulo = :idart";
        $consulta = $em->createQuery($dql);
        $consulta->setParameter('idart', $idart);
        return $consulta->getResult();
    }

    public function getVentaArt($idart)
    {
        $em = $this->getEntityManager();
        $dql = "SELECT DISTINCT (ven.id),ven.id as idventa,ven.serie,ven.numerodedocumento,ven.montototalapagar,ven.formadepago,ven.cantidaddearticulos,
                doc.tipodocumento,cli.nombre as cliente,ven.fecha
            FROM InventarioBundle:Movimiento m
            JOIN m.venta artv
            JOIN artv.venta ven
            JOIN ven.documento doc
            JOIN ven.cliente cli
            WHERE m.articulo = :idart";
        $consulta = $em->createQuery($dql);
        $consulta->setParameter('idart', $idart);
        return $consulta->getResult();
    }

     public function GenerarMotivosDeVentasCompras()
    {
        $em = $this->getEntityManager();
        
        //primero incluyo las ventas
        $qb = $em->createQueryBuilder('l');       
        $qb->select('e')
                ->from('BackendBundle:Venta', 'e')
                ->where('e.finalizada = true and (e.anulada = false or e.anulada IS NULL)')
                 ;
        
        
        //Show all if offset and limit not set, also show all when limit is 0
        if ((isset($offset)) && (isset($limit))) {
            if ($limit > 0) {
                $qb->setFirstResult($offset);
                $qb->setMaxResults($limit);
            }           
        }
        //Adding defined sorting parameters from variable into query
//        if($offset != 0){
//        foreach ($order_by as $key => $value) {
//            $qb->add('orderBy', 'e.' . $key . ' ' . $value);
//        }}
        $query = $qb->getQuery();
        $ventas = $query->getResult();
        
        foreach ($ventas as $vent) {
            foreach ($vent->getArticuloventas() as $artvent) {
                $query3 = $em->createQuery(
                                'SELECT COUNT(u.id)
                FROM InventarioBundle:Movimiento u
                WHERE u.venta = :id'
                        )->setParameter('id', $artvent->getId());

                $existenciaeninventario = $query3->getSingleScalarResult();
                
                if ($existenciaeninventario ==0) {
                    $movimiento = new Movimiento();
                    $movimiento = $this->movVenta($movimiento, $artvent, $em, 'nuevo');
                     $em->persist($movimiento);        
                }
            }
        }
        $em->flush();
        
        // ahora las compras
        $qb = $em->createQueryBuilder('l');       
        $qb->select('e')
                ->from('BackendBundle:Compra', 'e')
                 ;
        
        
        //Show all if offset and limit not set, also show all when limit is 0
        if ((isset($offset)) && (isset($limit))) {
            if ($limit > 0) {
                $qb->setFirstResult($offset);
                $qb->setMaxResults($limit);
            }           
        }
        //Adding defined sorting parameters from variable into query
//        if($offset != 0){
//        foreach ($order_by as $key => $value) {
//            $qb->add('orderBy', 'e.' . $key . ' ' . $value);
//        }}
        $query = $qb->getQuery();
        $compras = $query->getResult();
        
        foreach ($compras as $comp) {
            foreach ($comp->getArticulocompras() as $artcomp) {
                $query3 = $em->createQuery(
                                'SELECT COUNT(u.id)
                FROM InventarioBundle:Movimiento u
                WHERE u.compra = :id'
                        )->setParameter('id', $artcomp->getId());

                $existenciaeninventario = $query3->getSingleScalarResult();
                
                if ($existenciaeninventario ==0) {
                    $movimiento = new Movimiento();
                    $movimiento = $this->movCompra($movimiento, $artcomp, $em, 'nuevo');
                     $em->persist($movimiento);        
                }
            }
        }
        $em->flush();
    }
}
